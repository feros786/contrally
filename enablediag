param
(
    # Use Update to refresh a configuration such as changing to a new OMS WORKSPACE
    [switch]$Update,

    # Provide ResourceID of Workspace within same Tenant
    # to send multiple subs to one workspace
    [Parameter(Mandatory=$False,ParameterSetName='default')]
    [Parameter(Mandatory=$True,ParameterSetName='force')]
    [string]$WSID,

    # Provide SubscriptionID to bypass subscription listing
    [Parameter(Mandatory=$False,ParameterSetName='default')]
    [Parameter(Mandatory=$True,ParameterSetName='force')]
    [guid]$SubscriptionId,

    # Add ResourceType to reduce scope to Resource Type instead of entire list of resources to scan
    [Parameter(Mandatory=$False,ParameterSetName='default')]
    [Parameter(Mandatory=$True,ParameterSetName='force')]
    [string]$ResourceType,

    # Add a ResourceGroup name to reduce scope from entire Azure Subscription to RG
    [string]$ResourceGroupName,

    # Add a ResourceName name to reduce scope from entire Azure Subscription to specific named resource
    [string]$ResourceName,

    # Provide categories for logs to enable in the following format: "JobLogs,JobStreams"
    [string]$CategoriesChosen,

    # Use Force to run in silent mode (requires certain parameters to be provided)
    [Parameter(Mandatory=$True,ParameterSetName='force')]
    [switch]$Force,

    # Use to remove the configuration of logs for a selected resource type
    [switch]$DisableLogs,
    
    # Use to remove the configuration of metrics for a selected resource type
    [switch]$DisableMetrics,

    # Use to add the configuration of logs for a selected resource type (not requiring categories)
    # CategoriesChosen switch can be used in combination to enable granular category choice
    # Can be used with $EnableMetrics to enable metrics and logs at the same time
    [switch]$EnableLogs,
    
    # Use to add the configuration of metrics for a selected resource type
    # Can be used with $EnableLogs to enable metrics and logs at the same time
    [switch]$EnableMetrics
   
)
# FUNCTIONS
# Get the ResourceType listing from all ResourceTypes capable in this subscription
# to be sent to log analytics - use "-ResourceType" param to bypass
function Get-ResourceType (
    [Parameter(Mandatory=$True)]
    [array]$allResources
    )
{
    $analysis = @()
    
    foreach($resource in $allResources)
    {
        $Categories =@();
        $metrics = $false #initialize metrics flag to $false
        $logs = $false #initialize logs flag to $false
    
        if (! $analysis.where({$_.ResourceType -eq $resource.ResourceType}))
        {
            try
            {
                Write-Verbose "Checking $($resource.ResourceType)"
                $setting = Get-AzureRmDiagnosticSetting -ResourceId $resource.ResourceId -ErrorAction Stop
                # If logs are supported or metrics on each resource, set value as $True
                if ($setting.Logs) 
                { 
                    $logs = $true
                    $Categories = $setting.Logs.category 
                }


                if ($setting.Metrics) 
                { 
                    $metrics = $true
                }   
            }
            catch {}
            finally
            {
                $object = New-Object -TypeName PSObject -Property @{'ResourceType' = $resource.ResourceType; 'Metrics' = $metrics; 'Logs' = $logs; 'Categories' = $Categories}
                $analysis += $object
            }
        }
    }
    # Return the list of supported resources
    $analysis
}

# Enable Diagnostics and set WSID for each resource (if not already set)
function Set-Resource
{
    [cmdletbinding()]
    
    param
    (
        [Parameter(Mandatory=$True)]
        [array]$Resources,
        [switch]$Update,
        [string]$WSID,
        [array]$CategoryArray,
        [switch]$DisableLogs,
        [switch]$DisableMetrics,
        [switch]$EnableMetrics,
        [switch]$EnableLogs,
        [psobject]$DiagnosticCapability
    )
    Write-Host "Processing resources. Please wait...."
    Foreach($Resource in $Resources)
    {
        If(!($DisableLogs) -and !($DisableMetrics))
        {   
            $WSIDOK = $True
            $ResourceDiagnosticSetting = get-AzureRmDiagnosticSetting -ResourceId $Resource.ResourceId 
            if($ResourceDiagnosticSetting.WorkspaceId -ne $null -and $ResourceDiagnosticSetting.WorkspaceId -ne $WSID -and $Update -eq $False)
            {
                # If update switch not used, WSIDOK is set to false and warning is thrown
                $WSIDOK = $False
                $WS = ($ResourceDiagnosticSetting.WorkspaceId -split "/workspaces/", 2)[1]
                Write-Host "Resource $($Resource.Name) is already enabled for Workspace $WS. " -NoNewline
                write-host "Use -Update" -ForegroundColor Yellow

            }
            # Update switch enables updating workspaceID if one is already specified.
            if($Update -eq $True -and $WSIDOK -eq $True)
            {
                try
                {
                    $WS = ($WSID -split "/workspaces/", 2)[1]
                    $Diag = Set-AzureRmDiagnosticSetting -WorkspaceId $WSID -ResourceId $Resource.ResourceId
                    Write-Host "Workspace for existing resource $($Resource.Name) was updated to $WS." 
                }
                catch
                {
                    write-host "An error occurred setting diagnostics on $($Resource.Name)"
                }
            }
        
            # Metrics
            if(!($CategoryArray) -or $EnableMetrics -and $DiagnosticCapability.metrics -eq $True)
            {
                if($ResourceDiagnosticSetting.Metrics.Enabled -eq $False -and $DiagnosticCapability.metrics)
                {
                    try
                    {
                        $Diag = Set-AzureRmDiagnosticSetting -WorkspaceId $WSID -ResourceId $Resource.ResourceId -Enabled $True -Timegrains "PT1M"
                        Write-Host "Metrics gathering for new resource $($Resource.Name) was set to enabled"
                    }
                    catch
                    {
                        write-host "An error occurred setting diagnostics on $($Resource.Name)"
                    }
                }
            }
            # Logs and categories
            if($CategoryArray -or $EnableLogs -and $DiagnosticCapability.logs -eq $True)
            {
                if($CategoryArray)
                {
                    Foreach($Category in $CategoryArray)
                    {
                        foreach($ResDiagSetting in $ResourceDiagnosticSetting.logs)
                        {
                            if($ResDiagSetting.category -eq $Category -and $ResDiagSetting.enabled -eq $False)
                            {
                                try
                                {
                                    $Diag = Set-AzureRmDiagnosticSetting -WorkspaceId $WSID -ResourceId $Resource.ResourceId -Enabled $True -Categories $Category
                                    Write-Host "Resource $($Resource.Name) was enabled for Log Category $Category"
                                }
                                catch
                                {
                                    Throw "An error occurred setting diagnostics on $($Resource.Name) for $Category"
                                }
                            }
                        }
                    }
                }
                elseif($EnableLogs)
                {
                    foreach($ResDiagSetting in $ResourceDiagnosticSetting.logs)
                    {
                        # Enable only logs if not already enabled
                        # (enablelogs bypasses categorieschosen param)
                        if($ResDiagSetting.enabled -eq $False)
                        {
                            try
                            {
                                $Diag = Set-AzureRmDiagnosticSetting -WorkspaceId $WSID -ResourceId $Resource.ResourceId -Enabled $True -Categories $($ResDiagSetting.category)
                                Write-Host "Resource $($Resource.Name) was enabled for Log Category $($ResDiagSetting.category)"
                            }
                            catch
                            {
                                write-host "An error occurred setting diagnostics on $($Resource.Name) for $($ResDiagSetting.category)"
                            }
                        }
                    }
                }

            }
        }
        # Logic for Disabling logs and metrics
        elseif($DisableLogs -or $DisableMetrics)
        {
            # Disable specific categories on logs as defined by CategoriesChosen
            if($DisableLogs -and $CategoryArray -and $DiagnosticCapability.logs -eq $True)
            {
                foreach($Category in $CategoryArray)
                {
                    try
                    {
                        $RemoveDiag = Set-AzureRmDiagnosticSetting -ResourceId $Resource.ResourceId -Enabled $False -categories $Category
                        Write-Host "Resource $($Resource.Name) disabled category $Category for gathering"
                    }
                    catch
                    {
                        write-host "An error occurred removing diagnostic log category $Category on $($Resource.Name)"
                    }
                }
            }
            # Disable logs on a resource(s) if logs is a capablity supported on the resource(s)
            # This logic will dynamically build the categories supported and disable all
            # CategoriesChosen will override this if you want to disable only specific categories in a log
            If($DisableLogs -and !($CategoryArray) -and $DiagnosticCapability.logs -eq $True)
            {
                $ResourceDiagnosticSetting = get-AzureRmDiagnosticSetting -ResourceId $Resource.ResourceId
                foreach($Entry in $ResourceDiagnosticSetting.logs)
                {
                    try
                    {
                        $RemoveDiag = Set-AzureRmDiagnosticSetting -ResourceId $Resource.ResourceId -Enabled $False -categories $($Entry.Category)
                        Write-Host "Resource $($Resource.Name) disabled category $($Entry.Category) for gathering"
                    }
                    catch
                    {
                        write-host "An error occurred removing diagnostic log category $Category on $($Resource.Name)"
                    }
                }
            }
            # Disable metrics on a resource(s) if metrics is a capablity supported on the resource(s)
            if($DisableMetrics -and $DiagnosticCapability.Metrics -eq $True)
            {
                try
                {
                    $RemoveDiag = Set-AzureRmDiagnosticSetting -ResourceId $Resource.ResourceId -Enabled $False -Timegrains "PT1M"
                    Write-Host "Resource $($Resource.Name) was disabled for metrics gathering"
                }
                catch
                {
                    write-host "An error occurred removing diagnostic metrics on $($Resource.Name)"
                }
            }
        }
    }
}

# Function used to build numbers in selection tables for menus
function Add-IndexNumberToArray (
    [Parameter(Mandatory=$True)]
    [array]$array
    )
{
    for($i=0; $i -lt $array.Count; $i++) 
    { 
        Add-Member -InputObject $array[$i] -Name "#" -Value ($i+1) -MemberType NoteProperty 
    }
    $array
}

# MAIN SCRIPT
#Variable Definitions
[array]$Resources = @()

# Login to Azure - if already logged in, use existing credentials.
Write-Host "Authenticating to Azure..." -ForegroundColor Cyan
try
{
    $AzureLogin = get-azurermcontext
}
catch
{
    $null = Login-AzureRmAccount
    $AzureLogin = get-azurermcontext
}

# Authenticate to Azure if not already authenticated
# Ensure this is the subscription where your Azure Resources are you want to send diagnostic data from
If($AzureLogin -and !($SubscriptionID))
{
    [array]$SubscriptionArray = Add-IndexNumberToArray (Get-AzureRmSubscription) 
    [int]$SelectedSub = 0

    # use the current subscription if there is only one subscription available
    if ($SubscriptionArray.Count -eq 1) 
    {
        $SelectedSub = 1
    }
    # Get SubscriptionID if one isn't provided
    while($SelectedSub -gt $SubscriptionArray.Count -or $SelectedSub -lt 1)
    {
        Write-host "Please select a subscription from the list below"
        $SubscriptionArray | select "#", SubscriptionId, SubscriptionName | ft
        try
        {
            $SelectedSub = Read-Host "Please enter a selection from 1 to $($SubscriptionArray.count)"
        }
        catch
        {
            Write-Warning -Message 'Invalid option, please try again.'
        }
    }
    
    write-verbose "You Selected Azure Subscription: $($SubscriptionArray[$SelectedSub - 1].SubscriptionName)"
    [guid]$SubscriptionID = $($SubscriptionArray[$SelectedSub - 1].SubscriptionID)
    
}
Write-Host "Selecting Azure Subscription: $($SubscriptionID.Guid) ..." -ForegroundColor Cyan
$Null = Select-AzureRmSubscription -SubscriptionId $SubscriptionID.Guid

# Build a list of workspaces to choose from. If workspace is in another subscription
# provide the resourceID of that workspace as a parameter
# *** OMS workspace currently must be within the same tenant as the resource being configured ***
[array]$Workspaces=@()
if(!($WSID) -and !($DisableLogs) -and !($DisableMetrics))
{
    try
    {
        $Workspaces = Add-IndexNumberToArray (Get-AzureRmOperationalInsightsWorkspace) 
        Write-Host "Generating a list of workspaces from Azure Subscription Selected..." -ForegroundColor Cyan

        [int]$SelectedWS = 0
        if ($Workspaces.Count -eq 1)
        {
            $SelectedWS = 1
        }

        # Get WS Resource ID if one isn't provided
        while($SelectedWS -gt $Workspaces.Count -or $SelectedWS -lt 1 -and $Workspaces -ne $Null)
        {
            Write-Host "Please select a workspace from the list below"
            $Workspaces| select "#", Name, Location, ResourceGroupName, ResourceId | ft
            if($Workspaces.count -ne 0)
            {

                try
                {
                    $SelectedWS = Read-Host "Please enter a selection from 1 to $($Workspaces.count)"
                }
                catch
                {
                    Write-Warning -Message 'Invalid option, please try again.'
                }
            }
        }
    }
    catch
    {
        Write-Warning -Message 'No Workspace found - try specifying parameter WSID'
    }
    If($Workspaces)
    {
        Write-Host "You Selected Workspace: " -nonewline -ForegroundColor Cyan
        Write-Host "$($Workspaces[$SelectedWS - 1].Name)" -ForegroundColor Yellow
        $WSID = $($Workspaces[$SelectedWS - 1].ResourceID)

    }
    else
    {
        Throw "No OMS workspaces available in selected subscription $SubscriptionID"
    }
}

# Determine which resourcetype to search on
[array]$ResourcesToCheck = @()
[array]$DiagnosticCapable=@()
[array]$Logcategories = @()

# Build parameter set according to parameters provided.
$FindResourceParams = @{}
if($ResourceType)
{
    $FindResourceParams['ResourceType'] = $ResourceType
}
if($ResourceGroupName)
{
    $FindResourceParams['ResourceGroupNameEquals'] = $ResourceGroupName
}
if($ResourceName)
{
    $FindResourceParams['ResourceNameEquals'] = $ResourceName
}
$ResourcesToCheck = Find-AzureRmResource @FindResourceParams 

# If resourceType defined, ensure it can support diagnostics configuration
if($ResourceType)
{
    try
    {
        $Resources = $ResourcesToCheck
        $DiagnosticCapable = Get-ResourceType -allResources $Resources
        [int]$ResourceTypeToProcess = 0
        if ( $DiagnosticCapable.Count -eq 1)
        {
            $ResourceTypeToProcess = 1
        }
    }
    catch
    {
        Throw "No diagnostic capable resources of type $ResourceType available in selected subscription $SubscriptionID"
    }

}

# Gather a list of resources supporting Azure Diagnostic logs and metrics and display a table
if(!($ResourceType))
{
    Write-Host "Gathering a list of monitorable Resource Types from Azure Subscription ID " -NoNewline -ForegroundColor Cyan
    Write-Host "$SubscriptionId..." -ForegroundColor Yellow
    try
    {
        $DiagnosticCapable = Add-IndexNumberToArray (Get-ResourceType $ResourcesToCheck).where({$_.metrics -eq $True -or $_.Logs -eq $True}) 
        [int]$ResourceTypeToProcess = 0
        if ( $DiagnosticCapable.Count -eq 1)
        {
            $ResourceTypeToProcess = 1
        }
        while($ResourceTypeToProcess -gt $DiagnosticCapable.Count -or $ResourceTypeToProcess -lt 1 -and $Force -ne $True)
        {
            Write-Host "The table below are the resource types that support sending diagnostics to Log Analytics"
            $DiagnosticCapable | select "#", ResourceType, Metrics, Logs |ft
            try
            {
                $ResourceTypeToProcess = Read-Host "Please select a number from 1 - $($DiagnosticCapable.count) to enable (""True"" = supported configuration)"
            }
            catch
            {
                Write-Warning -Message 'Invalid option, please try again.'
            }
        }
        $ResourceType = $DiagnosticCapable[$ResourceTypeToProcess -1].ResourceType
        # Find all resources for $ResourceType defined
        $Resources = $ResourcesToCheck.where({$_.ResourceType -eq $ResourceType})
    }
    catch
    {
        Throw "No diagnostic capable resources available in selected subscription $SubscriptionID"
    }
}

# Convert string to array
if($CategoriesChosen)
{
    # Trim spaces out
    $CategoriesChosen = $CategoriesChosen.replace(" ","")
    
    # Define our array of log categories
    [array]$Logcategories = ($CategoriesChosen -split ",")
}

# If Logs is $True and categories not defined - prompt for categories to enable
if(!($CategoriesChosen) -and !($Force) -and !($EnableLogs) -and !($DisableLogs) -and $DiagnosticCapable[$ResourceTypeToProcess -1].logs -eq $True)
{
    foreach($Diag in $DiagnosticCapable.where({$_.ResourceType -eq $ResourceType}))
    {
        $CategoryList = $Diag.Categories

        $CAnalysis=@()
        $CategoriesChosen = @()
        if($Diag.ResourceType -eq $ResourceType)
        {
            foreach($Category in $CategoryList)
            {
                $cObject = New-Object -TypeName PSObject -Property @{'Categories' = $Category; 'ResourceType' = $ResourceType}| `
                    select 'Categories', 'ResourceType'
                $CAnalysis += $CObject
            }
        }
        $Canalysis = Add-IndexNumberToArray ($CAnalysis) 
        Write-Host "The following categories are available for logs for $ResourceType"
        $CAnalysis|select "#",Categories, ResourceType|ft
        [array]$Logcategories =@()
        
        [array]$CategoriesChosen = (Read-host "Please provide # of log(s) to process (separated by a comma) or type ALL").ToUpper()
        
        if($CategoriesChosen[0] -eq "ALL")
        {
            foreach($Category in $CAnalysis)
            {
                $Logcategories = $Logcategories + $($Category.Categories)
            }
        }
        elseif($CategoriesChosen -ne $Null)
        {
            # Trim spaces out
            $CategoriesChosen = $CategoriesChosen.replace(" ","")
           
            [array]$CategoriesChosen = ($CategoriesChosen -split ",")
            
            foreach($Category in $CategoriesChosen)
            {
                $Logcategories = $Logcategories + $($CAnalysis[$Category-1].Categories)
            }
        }
        Write-Host "You Chose the following"
        foreach($Line in $Logcategories)
        {
            write-host $Line -ForegroundColor Yellow
        }            
    }
}
[array]$CategoriesChosen = $Logcategories

# Validate customer wants to continue to update all resources in ResourceType selected
# If Force used, will update without prompting
if ($Force -OR $PSCmdlet.ShouldContinue("This operation will update $($Resources.Count) $ResourceType resources in your subscription. Continue?",$ResourceType) )
{
        Write-Host "Configuring $($Resources.Count) [$ResourceType] resources in your subscription." 
        Set-Resource -Resources $Resources -Update:$Update -WSID $WSID -CategoryArray $CategoriesChosen `
            -DisableLogs:$DisableLogs -DisableMetrics:$DisableMetrics `
            -EnableMetrics:$EnableMetrics -EnableLogs:$EnableLogs `
            -DiagnosticCapability $DiagnosticCapable[$ResourceTypeToProcess -1]
        Write-Host "Complete" -ForegroundColor Cyan
}
else
{
        Write-Host "You selected No - exiting"
        Write-Host "Complete" -ForegroundColor Cyan
}
